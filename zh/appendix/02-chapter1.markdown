# 附錄

-    [Shell 編程學習筆記](#toc_19246_27800_1)
    -    [前言](#toc_19246_27800_2)
    -    [執行 Shell 腳本的方式](#toc_19246_27800_3)
        -    [範例：輸入重定向到Bash](#toc_19246_27800_4)
        -    [範例：以腳本名作為參數](#toc_19246_27800_5)
        -    [範例：以 . 來執行](#toc_19246_27800_6)
        -    [範例：直接執行](#toc_19246_27800_7)
    -    [Shell 的執行原理](#toc_19246_27800_8)
    -    [變量賦值](#toc_19246_27800_9)
        -    [範例：獲取當前的工作目錄並存放到變量中](#toc_19246_27800_10)
    -    [數組](#toc_19246_27800_11)
        -    [範例：對數組元素賦值](#toc_19246_27800_12)
        -    [範例：訪問某個數組元素](#toc_19246_27800_13)
        -    [範例：數組組合賦值](#toc_19246_27800_14)
        -    [範例：列出數組中所有內容](#toc_19246_27800_15)
        -    [範例：獲取數組元素個數](#toc_19246_27800_16)
    -    [參數傳遞](#toc_19246_27800_17)
    -    [設置環境變量](#toc_19246_27800_18)
    -    [鍵盤讀起變量值](#toc_19246_27800_19)
    -    [設置變量的只讀屬性](#toc_19246_27800_20)
    -    [條件測試命令 test](#toc_19246_27800_21)
        -    [範例：數值比較](#toc_19246_27800_22)
        -    [範例：測試文件屬性](#toc_19246_27800_23)
        -    [範例：字符傳屬性以及比較](#toc_19246_27800_24)
        -    [範例：串比較](#toc_19246_27800_25)
    -    [整數算術或關係運算 expr](#toc_19246_27800_26)
    -    [控制執行流程命令](#toc_19246_27800_27)
        -    [範例：條件分支命令 if](#toc_19246_27800_28)
        -    [範例：case 命令舉例](#toc_19246_27800_29)
        -    [範例：循環語句 while, until](#toc_19246_27800_30)
        -    [範例：有限循環命令 for](#toc_19246_27800_31)
    -    [函數](#toc_19246_27800_32)
    -    [後記](#toc_19246_27800_33)


<span id="toc_19246_27800_1"></span>
## Shell編程學習筆記

<span id="toc_19246_27800_2"></span>
### 前言

這是作者早期的 Shell 編程學習筆記，主要包括 Shell 概述、 Shell 變量、位置參數、特殊符號、別名、各種控制語句、函數等 Shell 編程知識。

要想系統地學 Shell，應該找些較系統的資料，例如：[《Shell 編程範例》](http://www.tinylab.org/shell-programming-paradigm-series-index-review/)和[《鳥哥學習Shell Scripts》](http://www.chinaunix.net/jh/24/628472.html)。

<span id="toc_19246_27800_3"></span>
### 執行 Shell 腳本的方式

<span id="toc_19246_27800_4"></span>
#### 範例：輸入重定向到 Bash

```
$ bash < ex1
```

可以讀入 `ex1` 中的程序，並執行

<span id="toc_19246_27800_5"></span>
#### 範例：以腳本名作為參數

其一般形式是：

```
$ bash 腳本名 ［參數]
```

例如：

```
$ bash ex2 /usr/meng /usr/zhang
```

其執行過程與上一種方式一樣，但這種方式的好處是能在腳本名後面帶有參數，從而將參數值傳遞給程序中的命令，使一個 Shell 腳本可以處理多種情況，就如同函數調用時可根據具體問題傳遞相應的實參。

<span id="toc_19246_27800_6"></span>
#### 範例：以 . 來執行


如果以當前 Shell （以 `·` 表示）執行一個 Shell 腳本，則可以使用如下簡便形式：

```
$ · ex3［參數］
```

<span id="toc_19246_27800_7"></span>
#### 範例：直接執行

將 Shell 腳本的權限設置為可執行，然後在提示符下直接執行它。

具體辦法：

```
$ chmod a+x ex4
$ ./ex4
```

這個要求在 Shell 腳本的開頭指明執行該腳本的具體 Shell，例如 `/bin/bash`：

```
#!/bin/bash
```

<span id="toc_19246_27800_8"></span>
### Shell 的執行原理


 Shell 接收用戶輸入的命令（腳本名），並進行分析。如果文件被標記為可執行，但不是被編譯過的程序，Shell 就認為它是一個 Shell 腳本。 Shell 將讀取其中的內容，並加以解釋執行。所以，從用戶的觀點看，執行 Shell 腳本的方式與執行一般的可執行文件的方式相似。

因此，用戶開發的 Shell 腳本可以駐留在命令搜索路徑的目錄之下（通常是 `/bin`、`/usr/bin`等），像普通命令一樣使用。這樣，也就開發出自己的新命令。如果打算反覆使用編好的 Shell 腳本，那麼採用這種方式就比較方便。

<span id="toc_19246_27800_9"></span>
### 變量賦值


可以將一個命令的執行結果賦值給變量。有兩種形式的命令替換：一種是使用倒引號引用命令，其一般形式是： `命令表`。

<span id="toc_19246_27800_10"></span>
#### 範例：獲取當前的工作目錄並存放到變量中

例如：將當前工作目錄的全路徑名存放到變量dir中，輸入以下命令行：

```
$ dir=`pwd`
```

另一種形式是：`$(命令表)`。上面的命令行也可以改寫為：

```
$ dir=$(pwd)
```

<span id="toc_19246_27800_11"></span>
### 數組


`Bash` 只提供一維數組，並且沒有限定數組的大小。類似與 C 語言，數組元素的下標由 0 開始編號。獲取數組中的元素要利用下標。下標可以是整數或算術表達式，其值應大於或等於 0 。用戶可以使用賦值語句對數組變量賦值。

<span id="toc_19246_27800_12"></span>
#### 範例：對數組元素賦值


對數組元素賦值的一般形式是：`數組名[下標]＝值`，例如：

```
$ city[0]=Beijing
$ city[1]=Shanghai
$ city[2]=Tianjin
```

也可以用 `declare` 命令顯式聲明一個數組，一般形式是：

```
$ declare -a 數組名
```

<span id="toc_19246_27800_13"></span>
#### 範例：訪問某個數組元素


讀取數組元素值的一般格式是： `${數組名[下標]}`，例如：

```
$ echo ${city[0]}
Beijing
```

<span id="toc_19246_27800_14"></span>
#### 範例：數組組合賦值


一個數組的各個元素可以利用上述方式一個元素一個元素地賦值，也可以組合賦值。定義一個數組併為其賦初值的一般形式是：

```
數組名=(值1 值2 ... 值n)
```

其中，各個值之間以空格分開。例如：

```
$ A=(this is an example of shell script)
$ echo ${A[0]} ${A[2]} ${A[3]} ${A[6]}
this an example script
$ echo ${A[8]}
```

由於值表中初值共有 7 個，所以 `A` 的元素個數也是 7 。 `A[8]` 超出了已賦值的數組 `A` 的範圍，就認為它是一個新元素，由於預先沒有賦值，所以它的值是空串。

若沒有給出數組元素的下標，則數組名錶示下標為 0 的數組元素，如 `city` 就等價於 `city[0]`。

<span id="toc_19246_27800_15"></span>
#### 範例：列出數組中所有內容


使用 `*` 或 `@` 做下標，則會以數組中所有元素取代。

```
$ echo ${A[*]}
this is an example of shell script
```

<span id="toc_19246_27800_16"></span>
#### 範例：獲取數組元素個數


```
$ echo ${#A[*]}
7
```


<span id="toc_19246_27800_17"></span>
### 參數傳遞


假如要編寫一個 Shell 來求兩個數的和，可以怎麼實現呢？為了介紹參數傳遞的用法，編寫這樣一個腳本：

```
$ cat > add
let sum=$1+$2
echo $sum
```

保存後，執行一下：

```
$ chmod a+x ./add
$ ./add 5 10
15
```

可以看出 5 和 10 分別傳給了 `$1` 和 `$2`，這是 Shell 自己預設的參數順序，其實也可以先定義好變量，然後傳遞進去。

例如，修改上述腳本得到：

```
let sum=$X+$Y
echo $sum
```

再次執行：

```
$ X=5 Y=10 ./add
15
```

可以發現，同樣可以得到正確結果。

<span id="toc_19246_27800_18"></span>
### 設置環境變量


export一個環境變量：

```
$ export opid=True
```

這樣子就可以，如果要登陸後都生效，可以直接添加到 `/etc/profile` 或者 `~/.bashrc` 裡頭。

<span id="toc_19246_27800_19"></span>
### 鍵盤讀起變量值


可以通過 `read` 來讀取變量值，例如，來等待用戶輸入一個值並且顯示出來：

```
$ read -p "請輸入一個值 ： "  input ; echo "你輸入了一個值為 ：" $input
請輸入一個值 ： 21500
你輸入了一個值為 ： 21500
```


<span id="toc_19246_27800_20"></span>
### 設置變量的只讀屬性


有些重要的 Shell 變量，賦值後不應該修改，那麼可設置它為 `readonly` ：

```
$ oracle_home=/usr/oracle7/bin
$ readonly oracle_home
```

<span id="toc_19246_27800_21"></span>
### 條件測試命令 test


語法：`test 表達式`
如果表達式為真，則返回真，否則，返回假。

<span id="toc_19246_27800_22"></span>
#### 範例：數值比較


先給出數值比較時常見的比較符：

> `-eg =；-ne !=；-gt >；-ge >=；-lt <；-le <=`

```
$ test var1 -gt var2
```

<span id="toc_19246_27800_23"></span>
#### 範例：測試文件屬性


文件的可讀、可寫、可執行，是否為普通文件，是否為目錄分別對應：

> `-r; -w; -x; -f; -d`

```
$ test -r filename
```

<span id="toc_19246_27800_24"></span>
#### 範例：字符傳屬性以及比較


> 串的長度為零：`-z`； 非零：`-n`，如:

```
$ test -z s1
```

如果串 `s1` 長度為零，返回真。

<span id="toc_19246_27800_25"></span>
#### 範例：串比較


> 相等`"s1"="s2"`； 不相等 `"s1"!="s2"`

還有一種比較串的方法（可以按字典序來比較）：

```
$ if [[ 'abcde' < 'abcdf' ]]; then  echo "yeah,果然是誒"; fi
yeah,果然是誒
```

<span id="toc_19246_27800_26"></span>
### 整數算術或關係運算 expr


可用該命令進行的運算有：

> 算術運算：`+ - * / %`；邏輯運算`：= ! < <= > >=`

如:

```
$ i=5;expr $i+5
```

另外，`bc` 是一個命令行計算器，可以進行一些算術計算。

<span id="toc_19246_27800_27"></span>
### 控制執行流程命令

<span id="toc_19246_27800_28"></span>
#### 範例：條件分支命令 if


`if` 命令舉例：如果第一個參數是一個普通文件名，那麼分頁打印該文件；否則，如果它為目錄名，則進入該目錄並打印該目錄下的所有文件，如果也不是目錄，那麼提示相關信息。

```
if test -f $1
then
	pr $1>/dev/lp0
elif
	test-d $1
then
	(cd $1;pr *>/dev/lp0)
else
	echo $1 is neither a file nor a directory
fi
```

<span id="toc_19246_27800_29"></span>
#### 範例：case 命令舉例


`case` 命令是一個基於模式匹配的多路分支命令，下面將根據用戶鍵盤輸入情況決定下一步將執行那一組命令。

```
while ［ $reply!="y" ］ && [ $reply!="Y" ]                         #下面將學習的循環語句
do
	echo "\nAre you want to continue?(Y/N)\c"
	read reply             #讀取鍵盤
	case $replay in
		(y|Y) break;;         #退出循環
		(n|N) echo "\n\nTerminating\n"
		      exit 0;;
		    *) echo "\n\nPlease answer y or n"
			continue;       #直接返回內層循環開始出繼續
	esac
done
```

<span id="toc_19246_27800_30"></span>
#### 範例：循環語句 while, until


語法：

```
while/until 命令表1
do
	命令表2
done
```

區別是，前者執行命令表 1 後，如果退出狀態為零，那麼執行 `do` 後面的命令表 2，然後回到起始處，而後者執行命令表 1 後，如果退出狀態非零，才執行類似操作。例子同上。

<span id="toc_19246_27800_31"></span>
#### 範例：有限循環命令 for


語法：

```
for 變量名 in 字符串表
do
	命令表
done
```

舉例：

```
FILE="test1.c myfile1.f pccn.h"
for i in $FILE
do
	cd ./tmp
	cp $i $i.old
	echo "$i copied"
done
```

<span id="toc_19246_27800_32"></span>
### 函數


現在來看看 Shell 裡頭的函數用法，先看個例子：寫一個函數，然後調用它顯示 `Hello, World!` 

```
$ cat > show
# 函數定義
function show
{
	echo $1$2;
}
H="Hello,"
W="World!"
# 調用函數，並傳給兩個參數H和W
show $H $W
```

演示：

```
$ chmod 770 show
$./show
Hello,World!
```

看出什麼蹊蹺了嗎？

```
$ show $H $W
```

咱們可以直接在函數名後面跟實參。

實參順序對應“虛參”的 `$1,$2,$3`……

注意：假如要傳入一個參數，如果這個參數中間帶空格，怎麼辦？ 先試試看。

來顯示 `Hello World` （兩個單詞之間有個空格）

```
function show
{
	echo $1
}
HW="Hello World"
show "$HW"
```

如果直接 `show $HW`，肯定不行，因為 `$1` 只接受到了 `Hello`，所以結果只顯示 `Hello`，原因是字符串變量必須用 `"` 包含起來。

<span id="toc_19246_27800_33"></span>
### 後記

感興趣的話繼續學習吧！

還有好多強大的東西等著呢，比如 `cut`，`expr`，`sed`，`awk` 等等。
